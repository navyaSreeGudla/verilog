
module code_converters (
    input [1:0] a,
    input [3:0] b,
    output reg [4:0] c
);
    always @(*) begin
        case (a)
            2'b00: begin
                c[4] = b[3] & (b[1] | b[2]);
                c[3] = b[3] & ((~b[1]) & (~b[2]));
                c[2] = b[2] & ((~b[3]) & (b[1]));
                c[1] = (b[3] & b[2] & (~b[1])) | ((~b[3]) & b[1]);
                c[0] = b[0];
            end
            2'b01: begin
                c[4] = 0;
                c[3] =( (b[2]&(b[0]|b[1]))|b[3]); 
                c[2] =((~b[2])&(b[0]|b[1])|((~b[0])&(~b[1])&b[2]));
                c[1] = ~(b[0]|b[1]);
                c[0] = ~b[0];        
            end
            2'b10: begin
                c[4] = 0;
                c[3] =b[3]; 
                c[2] = b[2]|b[3];
                c[1] = b[1]|b[2];
                c[0] = b[0]|b[1];        
            end
            2'b11: begin
               $display("Invalid input");         
            end
            default: begin
                c = 5'b00000; // Default case to avoid latches
                $display("00 for bcd,01 for excess-3,10 for gray code"); 
            end
        endcase
    end
endmodule
